package net.lshift.example;
import com.google.common.collect.Lists;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import java.util.List;
import java.util.function.Consumer;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'ceri' at '16/10/17 11:06' with Gradle 2.10
 *
 * @author ceri, @date 16/10/17 11:06
 */
public class LibraryTest {
    public static final String NECRONOMICON = "Necronomicon";
    Shelves shelves = mock(Shelves.class);
    Library library = new Library(shelves);


    @Test
    public void shouldSayWhenBookIsPresent() {
        when(shelves.listBooks()).thenReturn(ShelfContract.EVIL_BOOKS);
        assertTrue(library.hasBook(NECRONOMICON));
    }

    @Test
    public void shouldSayWhenBookIsNotPresent() {
        when(shelves.listBooks()).thenReturn(ShelfContract.NICE_BOOKS);
        assertFalse(library.hasBook(NECRONOMICON));
    }

    @Test
    public void shouldNotExposeClientDirectlyToShelves() {
        ArgumentCaptor<Consumer<String>> captor = ArgumentCaptor.forClass(Consumer.class);
        Mockito.doNothing().when(shelves).giveBookTo(eq(NECRONOMICON), captor.capture());

        Library.Client client = mock(Library.Client.class);
        library.checkout(NECRONOMICON, client);

        captor.getValue().accept(NECRONOMICON);

        verify(client).receiveBook(NECRONOMICON);
    }
}
